{"ast":null,"code":"import { ofType } from \"redux-observable\";\nimport { mergeMap, catchError, of } from 'rxjs';\nimport { actions } from \"../slices/messages\";\nimport { repository } from \"../repository\";\nimport { afterFetch } from \"../helpers/handle-messages\";\nvar success = function success(roomHistory) {\n  return function (payload) {\n    return of(actions.success(afterFetch(roomHistory, payload)));\n  };\n};\nvar failure = function failure(payload) {\n  return of(actions.failure(payload));\n};\nvar perform = function perform(state$) {\n  return function (_ref) {\n    var payload = _ref.payload;\n    var roomsHistory = state$.value.room.data;\n    return repository.fetch(payload).pipe(mergeMap(success(roomsHistory))).pipe(catchError(failure));\n  };\n};\nexport var fetchMessages = function fetchMessages(actions$, state$) {\n  return actions$.pipe(ofType(actions.attempt)).pipe(mergeMap(perform(state$)));\n};","map":{"version":3,"names":["ofType","mergeMap","catchError","of","actions","repository","afterFetch","success","roomHistory","payload","failure","perform","state$","_ref","roomsHistory","value","room","data","fetch","pipe","fetchMessages","actions$","attempt"],"sources":["/home/nerds-pc/Projects/chat-app/Lyssa/src/room/epics/fetch-messages.ts"],"sourcesContent":["import {ofType} from \"redux-observable\"\nimport {mergeMap, catchError, of} from 'rxjs'\nimport {actions, Message, Room} from \"../slices/messages\";\nimport {AnyAction} from \"@reduxjs/toolkit\";\nimport {repository} from \"../repository\";\nimport {add, afterFetch} from \"../helpers/handle-messages\";\n\nconst success = (roomHistory) => (payload: Message[]) => of(actions.success(afterFetch(roomHistory, payload)))\n\nconst failure = (payload: any) => of(actions.failure(payload))\n\nconst perform = (state$) => ({ payload }: AnyAction) => {\n    const roomsHistory: Room[] = state$.value.room.data\n\n    return repository.fetch(payload)\n        .pipe(mergeMap(success(roomsHistory)))\n        .pipe(catchError(failure));\n}\n\nexport const fetchMessages = (actions$, state$) => actions$\n    .pipe(ofType(actions.attempt))\n    .pipe(mergeMap(perform(state$)))"],"mappings":"AAAA,SAAQA,MAAM,QAAO,kBAAkB;AACvC,SAAQC,QAAQ,EAAEC,UAAU,EAAEC,EAAE,QAAO,MAAM;AAC7C,SAAQC,OAAO;AAEf,SAAQC,UAAU;AAClB,SAAaC,UAAU;AAEvB,IAAMC,OAAO,GAAG,SAAVA,OAAOA,CAAIC,WAAW;EAAA,OAAK,UAACC,OAAkB;IAAA,OAAKN,EAAE,CAACC,OAAO,CAACG,OAAO,CAACD,UAAU,CAACE,WAAW,EAAEC,OAAO,CAAC,CAAC,CAAC;EAAA;AAAA;AAE9G,IAAMC,OAAO,GAAG,SAAVA,OAAOA,CAAID,OAAY;EAAA,OAAKN,EAAE,CAACC,OAAO,CAACM,OAAO,CAACD,OAAO,CAAC,CAAC;AAAA;AAE9D,IAAME,OAAO,GAAG,SAAVA,OAAOA,CAAIC,MAAM;EAAA,OAAK,UAAAC,IAAA,EAA4B;IAAA,IAAzBJ,OAAO,GAAAI,IAAA,CAAPJ,OAAO;IAClC,IAAMK,YAAoB,GAAGF,MAAM,CAACG,KAAK,CAACC,IAAI,CAACC,IAAI;IAEnD,OAAOZ,UAAU,CAACa,KAAK,CAACT,OAAO,CAAC,CAC3BU,IAAI,CAAClB,QAAQ,CAACM,OAAO,CAACO,YAAY,CAAC,CAAC,CAAC,CACrCK,IAAI,CAACjB,UAAU,CAACQ,OAAO,CAAC,CAAC;EAClC,CAAC;AAAA;AAED,OAAO,IAAMU,aAAa,GAAG,SAAhBA,aAAaA,CAAIC,QAAQ,EAAET,MAAM;EAAA,OAAKS,QAAQ,CACtDF,IAAI,CAACnB,MAAM,CAACI,OAAO,CAACkB,OAAO,CAAC,CAAC,CAC7BH,IAAI,CAAClB,QAAQ,CAACU,OAAO,CAACC,MAAM,CAAC,CAAC,CAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}